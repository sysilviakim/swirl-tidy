- Class: meta
  Course: swirl-tidy
  Lesson: Introduction_to_tibbles
  Author: Seo-young Silvia Kim
  Type: Standard
  Organization: American University
  Version: 0.1.0

# INTRO ========================================================================
- Class: text
  Output: >-
    Welcome back! Today we will explore what a tibble is, which is a central
    data structure in tidyverse. When you see ..., press Enter.
    
- Class: cmd_question
  Output: >-
    Run {install.packages("tidyverse")}, if it is not already installed.
    You can type "skip()" if this package is already installed.
    Remember to close all other sessions of R (if Windows) before this step.
    Otherwise, you may run into error messages such as 'Warning in
    install.packages : installation of package ‘XXX’ had non-zero exit status'.
  CorrectAnswer: if (!require("tidyverse")) install.packages("tidyverse")
  AnswerTests: >-
    any_of_exprs(
      'install.packages(pkgs = "tidyverse")',
      'if (!require("tidyverse")) install.packages(pkgs = "tidyverse")',
      'install.packages("tidyverse")',
      'if (!require("tidyverse")) install.packages("tidyverse")',
      'skip()'
    )
  Hint: 'If the package is already installed, type skip().'
    
- Class: cmd_question
  Output: 'Now load the tidyverse package.'
  CorrectAnswer: library("tidyverse")
  AnswerTests: any_of_exprs('library(tidyverse)', 'library("tidyverse")')
  Hint: 'Avoid using {require}. Use {library}.'

# TIBBLE CLASS =================================================================
## demo_lesson(4)
- Class: text
  Output: >-
    R's tidyverse uses {tibble}s instead of {data.frame}s.
    Let's first see what tibbles are.

## demo_lesson(5)
- Class: cmd_question
  Output: >-
    Load the mtcars data, which is part of the base package {datasets}.
    You can see the attached base packages with {sessionInfo()}.
    You can see the entire available datasets using {data()}.
  CorrectAnswer: data("mtcars")
  AnswerTests: any_of_exprs('data("mtcars")', 'data(mtcars)')
  Hint: 'Use {data} function.'
    
## demo_lesson(6)
- Class: cmd_question
  Output: >-
    Check the class of the "mtcars" object. 
    This should be lazy loaded as a <Promise>.
    (This simply means that they are not loaded until they are needed.
    Check out http://adv-r.had.co.nz/Functions.html#lazy-evaluation.)
  CorrectAnswer: class("mtcars")
  AnswerTests: any_of_exprs('class("mtcars")', 'class(mtcars)')
  Hint: 'Use {class} function.' 
  
## demo_lesson(7)
- Class: text
  Output: >-
    You should see '[1] "data.frame"' printed on your console. According to R
    Documentation (type {?data.frame} or {?base::data.frame}), data frames are
    "tightly coupled collections of variables which share many of the properties
    of matrices and lists, used as the fundamental data structure by most of
    R's modeling software."

## demo_lesson(8)
- Class: text
  Output: >- 
    On the other hand, a tibble is an enhanced subclass of data frames.
    Formally, they are of {tbl_df} class. See {?tibble::tbl_df} for more info
    on how they differ from base {data.frame}. Also see Chapter 10: Tibbles in
    R4DS at https://r4ds.had.co.nz/tibbles.html.
    
## demo_lesson(9)
- Class: cmd_question
  Output: >- 
    Use function {as_tibble} on "mtcars" to convert it from {data.frame} to
    {tibble}, and store it as "mtcars_tbl". 
  CorrectAnswer: mtcars_tbl <- as_tibble(mtcars)
  AnswerTests: any_of_exprs('mtcars_tbl <- as_tibble(mtcars)')
  Hint: 'Use {tibble::as_tibble}. Remember to store it to "mtcars_tbl".'

## demo_lesson(10)
- Class: cmd_question
  Output: 'Find out the class of "mtcars_tbl".'
  CorrectAnswer: class(mtcars_tbl)
  AnswerTests: omnitest(correctExpr = 'class(mtcars_tbl)')
  Hint: 'Use function {class}. You should not put double quotes here.'

## demo_lesson(11)
- Class: text
  Output: >- 
    You will see the following printed on your console:
    '[1] "tbl_df"     "tbl"        "data.frame"'.
    Something to note is that while all tibbles are also data frames, not all
    data frames are tibbles. 
    
## demo_lesson(12)
- Class: cmd_question
  Output: >- 
    You can convert a tibble back to a dataframe using {base::as.data.frame}.
    Find out the class of "mtcars_tbl" using the {as.data.frame} function.
  CorrectAnswer: class(as.data.frame(mtcars_tbl))
  AnswerTests: >-
    any_of_exprs(
      'class(as.data.frame(mtcars_tbl))',
      'class(base::as.data.frame(mtcars_tbl))'
    )
  Hint: 'Use {as.data.frame} and then {class}.'
  
## demo_lesson(13)
- Class: text
  Output: >- 
    You should see '[1] "data.frame"' printed on your console again.
    For some user-developed packages, if the developer is using only base R,
    some of their functions may not work on tibbles. If you are running into a
    perfectly harmless code that throws out errors, you may want to see whether
    the function is compatible with tibbles. See also R4DS Chapter 10.4:
    Interacting with older code. 
    
# CREATING TIBBLES =============================================================
## demo_lesson(16)
- Class: text
  Output: >- 
    You can of course create tibbles from scratch, just as you would have done
    with {base::data.frame}. If you haven't tried such exercise, look up
    {base::data.frame} in the play() mode.
    
## demo_lesson(17)
- Class: cmd_question
  Output: >- 
    Create a tibble with column x with lowercase alphabet a to e, and with
    column y with integers 1 to 5.
  CorrectAnswer: tibble(x = letters[seq(5)], y = seq(5))
  AnswerTests: >-
    any_of_exprs(
      'tibble::tibble(x = letters[seq(5)], y = seq(5))',
      'tibble::tibble(x = letters[1:5],    y = seq(5))',
      'tibble::tibble(x = c("a", "b", "c", "d", "e"), y = seq(5))',
      'tibble::tibble(x = letters[seq(5)], y = 1:5)',
      'tibble::tibble(x = letters[1:5],    y = 1:5)',
      'tibble::tibble(x = c("a", "b", "c", "d", "e"), y = 1:5)',
      'tibble::tibble(x = letters[seq(5)], y = c(1, 2, 3, 4, 5))',
      'tibble::tibble(x = letters[1:5],    y = c(1, 2, 3, 4, 5))',
      'tibble::tibble(x = c("a", "b", "c", "d", "e"), y = c(1, 2, 3, 4, 5))',
      'dplyr::tibble(x = letters[seq(5)], y = seq(5))',
      'dplyr::tibble(x = letters[1:5],    y = seq(5))',
      'dplyr::tibble(x = c("a", "b", "c", "d", "e"), y = seq(5))',
      'dplyr::tibble(x = letters[seq(5)], y = 1:5)',
      'dplyr::tibble(x = letters[1:5],    y = 1:5)',
      'dplyr::tibble(x = c("a", "b", "c", "d", "e"), y = 1:5)',
      'dplyr::tibble(x = letters[seq(5)], y = c(1, 2, 3, 4, 5))',
      'dplyr::tibble(x = letters[1:5],    y = c(1, 2, 3, 4, 5))',
      'dplyr::tibble(x = c("a", "b", "c", "d", "e"), y = c(1, 2, 3, 4, 5))',
      'tibble(x = letters[seq(5)], y = seq(5))',
      'tibble(x = letters[1:5],    y = seq(5))',
      'tibble(x = c("a", "b", "c", "d", "e"), y = seq(5))',
      'tibble(x = letters[seq(5)], y = 1:5)',
      'tibble(x = letters[1:5],    y = 1:5)',
      'tibble(x = c("a", "b", "c", "d", "e"), y = 1:5)',
      'tibble(x = letters[seq(5)], y = c(1, 2, 3, 4, 5))',
      'tibble(x = letters[1:5],    y = c(1, 2, 3, 4, 5))',
      'tibble(x = c("a", "b", "c", "d", "e"), y = c(1, 2, 3, 4, 5))'
    )
  Hint: 'Use function {tibble}.'
  
## demo_lesson(18)
- Class: cmd_question
  Output: >- 
    As with {base::data.frame}, columns with inputs of
    length 1 will be recycled/repeated. Execute the following code:
    {tibble(x = 1:5, y = 1)}.
  CorrectAnswer: tibble(x = 1:5, y = 1)
  AnswerTests: omnitest(correctExpr = 'tibble(x = 1:5, y = 1)')
  Hint: 'Just copy-paste it!'
    
## demo_lesson(19)
- Class: cmd_question
  Output: >- 
    *Unlike* {base::data.frame}, columns with length divisible by each other
    will not be accepted. Let me show this. Execute the following code:
    {data.frame(x = seq(10), y = seq(2))}.
  CorrectAnswer: data.frame(x = seq(10), y = seq(2))
  AnswerTests: omnitest(correctExpr = 'data.frame(x = seq(10), y = seq(2))')
  Hint: 'Just copy-paste it!'
  
## demo_lesson(20)
- Class: cmd_question
  Output: >-
    Now do the same code but with {data.frame} substituted by {tibble}.
    Do this in the 'play' mode of swirl, which you can enter by typing {play()}.
    Resume the lesson when you have finished by executing {nxt()} and then
    {skip()}. (Swirl does not allow for error-inducing code as answers, so this
    is a bit hacky.)
  CorrectAnswer: skip()
  AnswerTests: omnitest(correctExpr = 'skip()')
  Hint: 'After you have done so in {play()}, type {nxt()}, and then {skip()}.'

## demo_lesson(21)
- Class: text
  Output: >-
    That should have given you an error that said:
    'Error: Tibble columns must have compatible sizes.'
    
## demo_lesson(22)
- Class: cmd_question
  Output: >-
    However, tibbles "allows you to refer to variables that you just created" 
    (R4DS Chapter 10.2). Let's first try {data.frame} with
    {data.frame(x = 1:5, y = x ^ 2)}. (You should do this in the play mode
    again. Type {skip()} to proceed.)
  CorrectAnswer: skip()
  AnswerTests: omnitest(correctExpr = 'skip()')
  Hint: 'After you have done so in {play()}, type {nxt()}, and then {skip()}.'
  
## demo_lesson(23)
- Class: text
  Output: >- 
    Unless you had an object "x" in the Global Environment due to other jobs
    run in the same R Session, you should have seen the following message:
    'Error in data.frame(x = 1:5, y = x^2) : object 'x' not found'.
  
## demo_lesson(24)
- Class: cmd_question
  Output: 'Now do the same exercise with {tibble}.'
  CorrectAnswer: tibble(x = 1:5, y = x ^ 2)
  AnswerTests: omnitest(correctExpr = 'tibble(x = 1:5, y = x ^ 2)')
  Hint: 'Just copy-paste it!'
  
## demo_lesson(25)
- Class: text
  Output: >- 
    You will see that column "y" was created automatically, with values that 
    correspond to column "x".
    
# PRINTING TIBBLES =============================================================
## demo_lesson(27)
- Class: text
  Output: >-
    Once tibbles are created, you should know that they differ from base R data
    frames in (1) printing, and (2) subsetting (see R4DS 10.3). 
    
## demo_lesson(28)
- Class: cmd_question
  Output: 'First, print the "mtcars" data frame.'
  CorrectAnswer: print(mtcars)
  AnswerTests: any_of_exprs('print(mtcars)', 'mtcars')
  Hint: 'You should not be using the double quotes inside {print} function.'
  
## demo_lesson(29)
- Class: cmd_question
  Output: >-
    That printed the entire thirty-two rows of mtcars! Indeed, it will print
    up to a thousand rows, which is the default behavior of data frames.
    That can be a little overwhelming on your console.
    Now print "mtcars_tbl".
  CorrectAnswer: print(mtcars_tbl)
  AnswerTests: any_of_exprs('print(mtcars_tbl)', 'mtcars_tbl')
  Hint: 'You should not be using the double quotes inside {print} function.'
  
## demo_lesson(30)
- Class: text
  Output: >-
    It is truncated in both rows/columns (10 rows, columns that will fit up
    to the visible area), shows you what the data types are for each variable,
    and also shows the number of rows and columns. 
    
## demo_lesson(31)
- Class: cmd_question
  Output: >-
    You may want to see more than 10 rows while exploring your data. In that
    case, explicitly use {print} function with `n` argument. Try printing
    the first 15 rows of "mtcars_tbl".
  CorrectAnswer: print(mtcars_tbl, n = 15)
  AnswerTests: >-
    any_of_exprs(
      'print(mtcars_tbl, n = 15)',
      'head(mtcars_tbl, 15)',
      'mtcars_tbl %>% print(n = 15)',
      'mtcars_tbl %>% head(., 15)'
    )
  Hint: 'You should not be using the double quotes inside {print} function.'
  
## demo_lesson(32)
- Class: text
  Output: >-
    You can also use argument `width` of the print function to control the width
    of the display. Alternatively, you can override the default printing
    behavior by using {options}.
    
# SUBSETTING TIBBLES ===========================================================
## demo_lesson(33)
- Class: cmd_question
  Output: >-
    Lastly, tibbles differ from data frames in how they subset the data. 
    Tibbles will not allow partial matching when subsetting the data
    frame using $ operator.
    Try finding/printing column "m" from the regular data frame
    "mtcars" using the $ operator (not [[).
  CorrectAnswer: mtcars$m
  AnswerTests: >-
    any_of_exprs(
      'mtcars$m',
      'print(mtcars$m)'
    )
  Hint: 'Use the $ operator.'
  
## demo_lesson(34)
- Class: cmd_question
  Output: 'Do the same thing on tibble "mtcars_tbl".'
  CorrectAnswer: mtcars_tbl$m
  AnswerTests: >-
    any_of_exprs(
      'mtcars_tbl$m',
      'print(mtcars_tbl$m)'
    )
  Hint: 'Use the $ operator.'
  
## demo_lesson(35)
- Class: text
  Output: >-
    You should have seen the following warning:
    'Warning message: Unknown or uninitialised column: `m`.'
    With tibbles you need to input the column name as is.
    This helps prevent mistakes. 
  
## demo_lesson(36)
- Class: cmd_question
  Output: >-
    If you reference a single column using indexing, a data.frame will return
    a vector. Try this with {mtcars[, "mpg"]}.
  CorrectAnswer: mtcars[, "mpg"]
  AnswerTests: any_of_exprs('mtcars[, "mpg"]')
  Hint: 'Just copy-paste it!'
  
## demo_lesson(37)
- Class: cmd_question
  Output: 'Now try the same on "mtcars_tbl" and watch how they differ.'
  CorrectAnswer: mtcars_tbl[, "mpg"]
  AnswerTests: any_of_exprs('mtcars_tbl[, "mpg"]')
  Hint: 'Just copy-paste it!'
  
# OUTRO ========================================================================
- Class: text
  Output: >-
    So that was the very basic introduction to tibbles! This is essential as we
    move on to the key lessons. To learn more about tibbles, visit lesson
    "08_tidy_tibble". There you will learn how to convert other types of
    data structures (list, matrix, vector, ...) into tibbles, create transposed
    tibbles, add rows/columns, and tidy the data frame's column names. 

- Class: text
  Output: >-
    You have completed "Introduction to tibbles" lesson of swirl-tidy!
    I will see you in the next lesson.

    
