- Class: meta
  Course: swirl-tidy
  Lesson: Import_with_readr
  Author: Seo-young Silvia Kim
  Type: Standard
  Organization: American University
  Version: 0.1.0

# INTRO ========================================================================
- Class: text
  Output: >-
    Welcome back! Today we will explore how to export data using the {readr}
    package. When you see ..., press Enter.
    
- Class: cmd_question
  Output: >-
    Run {install.packages("tidyverse")}, if it is not already installed.
    You can type "skip()" if this package is already installed.
    Remember to close all other sessions of R (if Windows) before this step.
    Otherwise, you may run into error messages such as 'Warning in
    install.packages : installation of package ‘XXX’ had non-zero exit status'.
  CorrectAnswer: if (!require("tidyverse")) install.packages("tidyverse")
  AnswerTests: >-
    any_of_exprs(
      'install.packages(pkgs = "tidyverse")',
      'if (!require("tidyverse")) install.packages(pkgs = "tidyverse")',
      'install.packages("tidyverse")',
      'if (!require("tidyverse")) install.packages("tidyverse")',
      'skip()'
    )
  Hint: 'If the package is already installed, type skip().'
    
- Class: cmd_question
  Output: 'Now load the tidyverse package.'
  CorrectAnswer: library("tidyverse")
  AnswerTests: any_of_exprs('library(tidyverse)', 'library("tidyverse")')
  Hint: 'Avoid using {require}. Use {library}.'

# PREAMBLE =====================================================================
## demo_lesson(4)
- Class: text
  Output: >-
    As of tidyverse 1.3.0, {readr} package is one of the eight core packages.
    This package is a "fast and friendly way to read rectangular data
    (like csv, tsv, and fwf)." It has a convenient automatic parser, displays
    a progress bar to let you know how far along it is in importing data, and
    has a set of useful warnings/messages. For RStudio cheat sheet, check out
    https://rawgit.com/rstudio/cheatsheets/master/data-import.pdf.

## demo_lesson(5)
- Class: text
  Output: >-
    Note that {readr} does not import .xls or .xlsx files. For that, you have to
    use {readxl} package. Go to lesson "Import_with_readxl" for more info on how
    to export Excel files.

## demo_lesson(6)
- Class: text
  Output: >-
    Before we begin, I must warn you that reading a file may depend on (1)
    which operating system the file was written in, and (2) which operating
    system is reading the file. This is because a Windows requires both a 
    carriage return (CR) and a line feed (LF) to signal a newline (\n), whereas
    in Unix systems it's only line feed. For an overview, see
    https://en.wikipedia.org/wiki/Newline. Point is, if something is not working
    you may want to pull your file up in Notepad++ or similar and in "View", 
    "Show Symbol/Show End of Line" and see if that is causing your problem.

# READING DIFFERENT FILE TYPES =================================================
## demo_lesson(7)
- Class: text
  Output: >-
    First, let's explore how to import files with different delimiters.
    Let's first try importing a CSV (comma-separated values file) file.
    The files you will use have been already loaded in the directory.

## demo_lesson(8)
- Class: cmd_question
  Output: >-
    You will be using {readr::read_csv} function. Read "file.csv" into object
    called "csv_comma". Instead of just "file.csv", use
    {file.path(lesson_dir, "file.csv")} to ensure that you are accessing the
    file in the right directory. Do similarly for all read exercises in this
    lesson.
  CorrectAnswer: csv_comma <- read_csv(file.path(lesson_dir, "file.csv"))
  AnswerTests: >-
    any_of_exprs(
      'csv_comma <- readr::read_csv(file.path(lesson_dir, "file.csv"))', 
      'csv_comma <- read_csv(file.path(lesson_dir, "file.csv"))'
    )
  Hint: >-
    This one's difficult the first time, so I'll just give you the answer:
    {csv_comma <- read_csv(file.path(lesson_dir, "file.csv"))}.

## demo_lesson(9)
- Class: text
  Output: >-
    Great job!! You should have seen a message that said 
    "Parsed with column specification:
    cols(
      a = col_double(),
      b = col_double(),
      c = col_double()
    )".
    Essentially, the parser has told us that it thinks the data that it read 
    are all numeric (double).

## demo_lesson(10)
- Class: cmd_question
  Output: >-
    Is this true? Check it out by printing "csv_comma".
  CorrectAnswer: csv_comma
  AnswerTests: any_of_exprs('csv_comma', 'print(csv_comma)')
  Hint: 'Print csv_comma whichever way you want!'

## demo_lesson(11)
- Class: text
  Output: >-
    Columns `a`, `b`, and `c` indeed all contain just numbers, although there's
    a missing value at column `c`. We'll come back to this automatic parsing
    later.
    
## demo_lesson(12)
- Class: text
  Output: >-
    That was easy, wasn't it? You just read in a plain old comma delimited file.
    But when you deal with real-world data, there are many other delimiters used
    such as semi-colon, vertical bar, two vertical bars, tab, ... 
    
## demo_lesson(13)
- Class: mult_question
  Output: 
    What is the delimiter used for the following tabular data?
    "a;b;c\n1;2;3\n4;5;NA"
  AnswerChoices: comma; semi-colon; vertical bar; tab
  CorrectAnswer: semi-colon
  AnswerTests: omnitest(correctVal = 'semi-colon')
  Hint: '\n is a newline operator.'
  
## demo_lesson(14)
- Class: cmd_question
  Output: >-
    Semi-colon delimited files are read by "read_csv2". Note the *2*. 
    Let's try reading "file2.csv" into "csv_semicolon". Similarly use
    {file.path(lesson_dir, "file2.csv")} as path.
  CorrectAnswer: csv_semicolon <- read_csv2(file.path(lesson_dir, "file2.csv"))
  AnswerTests: >-
    any_of_exprs(
      'csv_semicolon <- 
         read::read_csv2(file = file.path(lesson_dir, "file2.csv"))', 
      'csv_semicolon <- 
         read_csv2(file = file.path(lesson_dir, "file2.csv"))'
    )
  Hint: >-
    Do not specify any extra arguments.
    Keep using {file.path} so that R can find the file in `lesson_dir`.

## demo_lesson(15)
- Class: cmd_question
  Output: >-
    At this point you might ask: do I have to open the raw data to check the
    delimiter? You can usually get around it by using {base::readLines}.
    Try reading *only* the first line of "file2.csv" by using `n = 1` argument
    with {readLines}. Keep using the {file.path} function.
  CorrectAnswer: readLines(file.path(lesson_dir, "file2.csv"), n = 1)
  AnswerTests: >-
    any_of_exprs(
      'readLines(con = file.path(lesson_dir, "file2.csv"), n = 1)', 
      'base::readLines(con = file.path(lesson_dir, "file2.csv"), n = 1)'
    )
  Hint: >-
    Do not specify any extra arguments except `n = 1`.
    Remember to put double quotes around file name.
    Keep using {file.path} so that R can find the file in `lesson_dir`.

## demo_lesson(16)
- Class: text
  Output: >-
    You should have seen '[1] "a;b;c"' printed on the console. Your delimiter
    is probably the semi-colon. `n = 1` helps to not overwhelm the console.

## demo_lesson(17)
- Class: text
  Output: >-
    Some datasets are configured with different delimiters. In that case,
    {read_delim}, which is similar to {utils::read.delim} but forces you to 
    specify the delimiter explicitly.
    
## demo_lesson(18)
- Class: cmd_question
  Output: >-
    Find out the delimiter of file called "file.txt" using {readLines}.
    Keep using the {file.path} function.
  CorrectAnswer: readLines(file.path(lesson_dir, "file.txt"), n = 1)
  AnswerTests: >-
    any_of_exprs(
      'readLines(con = file.path(lesson_dir, "file.txt"), n = 1)', 
      'base::readLines(con = file.path(lesson_dir, "file.txt"), n = 1)'
    )
  Hint: >-
    Change the file name from the previous exercise!
    Keep using {file.path} so that R can find the file in `lesson_dir`.

## demo_lesson(19)
- Class: mult_question
  Output: 'What was the delimiter used for "file.txt"?'
  AnswerChoices: comma; semi-colon; vertical bar; tab
  CorrectAnswer: vertical bar
  AnswerTests: omnitest(correctVal = 'vertical bar')
  Hint: 'What operator separated values `a`, `b`, and `c`?'
  
## demo_lesson(20)
- Class: cmd_question
  Output: >-
    Excellent!! Now try reading "file.txt" into an object called "test_delim"
    using the {read_delim} function. The argument you must input is `delim`. Do
    not touch any other argument. Use the {play()} mode if you want to explore.
    Keep using the {file.path} function.
  CorrectAnswer: >-
    test_delim <- read_delim(file.path(lesson_dir, "file.txt"), delim = "|")
  AnswerTests: >-
    any_of_exprs(
      'test_delim <- 
         read_delim(file = file.path(lesson_dir, "file.txt"), delim = "|")', 
      'test_delim <- 
         readr::read_delim(
           file = file.path(lesson_dir, "file.txt"), delim = "|"
         )'
    )
  Hint: >
    Do not use arguments other than `file` and `delim`.
    Keep using {file.path} so that R can find the file in `lesson_dir`.

## demo_lesson(21)
- Class: test
  Output: >-
    As you can imagine, {read_delim} is quite versatile.
    When you have a moment, open up {?read_delim} and carefully read its default
    arguments, especially `quote = "\""`, `col_names = TRUE`, `na = c("", "NA")`
    , and `trim_ws = FALSE`. 

## demo_lesson(22)
- Class: text
  Output: >-
    For tab delimited file (.tsv) you can use {read_tsv}, and for fixed width
    files (.fwf), you can use {read_fwf}. We will not do demonstrations for
    these functions.

# READING DIFFERENT FILE TYPES =================================================
## demo_lesson(23)
- Class: text
  Output: >-
    You have successfully navigated how to import files with different
    delimiters! Great job!!
    
    What we have not done yet is specifying different arguments in 
    read_* functions. Now this can give you a *real* headache with real-life
    messy data.

## demo_lesson(24)
- Class: cmd_question
  Output: >-
    Let's go back to {read_csv}, but this time, let's read "file_mess.csv".
    Store this in "csv_mess". Keep using {file.path} similarly.
  CorrectAnswer: csv_mess <- read_csv(file.path(lesson_dir, "file_mess.csv"))
  AnswerTests: >-
    any_of_exprs(
      'csv_mess <- readr::read_csv(file.path(lesson_dir, "file_mess.csv"))',
      'csv_mess <- read_csv(file.path(lesson_dir, "file_mess.csv"))'
    )
  Hint: >-
    Do not specify any extra arguments.
    Remember to put double quotes around file name.
    Use {file.path} so that R can find the file in `lesson_dir`.

## demo_lesson(25)
- Class: text
  Output: >-
    All of sudden you see a warning message that says
    "Warning: 1 parsing failure." What is this error? The rest of the message
    should be deciphered as follows: "I expected to find a double (numeric), but 
    actually, I found 'some string'. This happened in row 1,001, column `b`."

## demo_lesson(26)
- Class: cmd_question
  Output: >-
    Print out the last 6 rows of "csv_mess". You can do this using {tail}.
  CorrectAnswer: tail(csv_mess)
  AnswerTests: >-
    any_of_exprs(
      'tail(csv_mess, n = 6)', 
      'utils::tail(csv_mess, n = 6)',
      'tail(csv_mess)', 
      'utils::tail(csv_mess)'
    )
  Hint: 'Use function {tail}.'

## demo_lesson(27)
- Class: mult_question
  Output: >-
    What does {read_csv} say the value of "csv_mess" is at its last row and
    column `b`?
  AnswerChoices: 22; NA; 29; 30; 21
  CorrectAnswer: semi-colon
  AnswerTests: omnitest(correctVal = 'NA')
  Hint: 'See what {tail} is showing on your console.'

## demo_lesson(28)
- Class: cmd_question
  Output: >-
    Now try reading the same file using base R's {read.csv} instead and
    store it at "csv_mess2".
  CorrectAnswer: csv_mess2 <- read.csv(file.path(lesson_dir, "file_mess.csv"))
  AnswerTests: >-
    any_of_exprs(
      'csv_mess2 <- utils::read.csv(file.path(lesson_dir, "file_mess.csv"))', 
      'csv_mess2 <- read.csv(file.path(lesson_dir, "file_mess.csv"))'
    )
  Hint: >-
    Do not specify any extra arguments.
    Remember to put double quotes around file name.
    Use {file.path} so that R can find the file in `lesson_dir`.

## demo_lesson(29)
- Class: cmd_question
  Output: >-
    Print out the last 6 rows of "csv_mess2" similarly as before.
  CorrectAnswer: tail(csv_mess2)
  AnswerTests: >-
    any_of_exprs(
      'tail(csv_mess2, n = 6)', 
      'utils::tail(csv_mess2, n = 6)',
      'tail(csv_mess2)', 
      'utils::tail(csv_mess2)'
    )
  Hint: 'Use function {tail}.'

## demo_lesson(30)
- Class: text
  Output: >
    What happened?! Well, the actual value in the file was character string
    'some string'. But by default, "readr only looks at the first 1000 rows.
    This keeps file parsing speedy, but can generate incorrect guesses"
    (https://readr.tidyverse.org/articles/readr.html).
    
    
    Because the first thousand rows for column `b` had only numbers, it decided
    to assume that the column type was `col_double()`.

## demo_lesson(31)
- Class: text
  Output: >-
    If you have messy data with incoherent variable types, you may want
    to fine-control the column types with read_* functions to prevent such
    issues. Alternatively, you could increase the number of rows that readr
    should take to guess column types (`guess_max` argument).

## demo_lesson(32)
- Class: cmd_question
  Output: >-
    Read the same file with {read_csv}, but this time, specify 
    `col_types = cols(.default = "c")` as an argument. Store it to "csv_mess3".
  CorrectAnswer: >-
    csv_mess3 <- readr::read_csv(
       file.path(lesson_dir, "file_mess.csv"),
       col_types = cols(.default = "c")
    )
  AnswerTests: >-
    any_of_exprs(
      'csv_mess3 <- readr::read_csv(
         file.path(lesson_dir, "file_mess.csv"),
         col_types = cols(.default = "c")
      )', 
      'csv_mess3 <- read_csv(
         file.path(lesson_dir, "file_mess.csv"),
         col_types = cols(.default = "c")
      )'
    )
  Hint: >-
    Do not specify any extra arguments.
    Remember to put double quotes around file name.
    Use {file.path} so that R can find the file in `lesson_dir`.

## demo_lesson(33)
- Class: cmd_question
  Output: 'Print out the last 6 rows of "csv_mess3" similarly as before.'
  CorrectAnswer: tail(csv_mess3)
  AnswerTests: >-
    any_of_exprs(
      'tail(csv_mess3, n = 6)', 
      'utils::tail(csv_mess3, n = 6)',
      'tail(csv_mess3)', 
      'utils::tail(csv_mess3)'
    )
  Hint: 'Use function {tail}.'
  
## demo_lesson(34)
- Class: text
  Output: >
    This time, all columns were imported as strings ('<chr>'). This way you can
    inspect the column types and then wrangle them. You can also go through the
    raw data outside R and then specify `col_types` for each variable!
    
    
    Sounds tedious? Some data requires you to get knee-deep in its mess!
    Otherwise, it'll come back to bite and waste your time even more.

# OUTRO ========================================================================
- Class: text
  Output: >-
    You have completed "Import with readr" lesson of swirl-tidy!
    Check out its official website at https://readr.tidyverse.org. 
    I will see you in the next lesson.
    
