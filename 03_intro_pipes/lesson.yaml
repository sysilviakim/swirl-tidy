- Class: meta
  Course: swirl-tidy
  Lesson: 03_intro_pipes
  Author: Seo-young Silvia Kim
  Type: Standard
  Organization: American University
  Version: 0.1.0

# INTRO ========================================================================
- Class: text
  Output: >-
    Welcome back! Today we will explore what a pipe-operator is, a central
    concept in tidyverse. When you see ..., press Enter.
    
- Class: cmd_question
  Output: >-
    Run {install.packages("tidyverse")}, if it is not already installed.
    You can type "skip()" if this package is already installed.
    Remember to close all other sessions of R (if Windows) before this step.
    Otherwise, you may run into error messages such as 'Warning in
    install.packages : installation of package ‘XXX’ had non-zero exit status'.
  CorrectAnswer: if (!require("tidyverse")) install.packages("tidyverse")
  AnswerTests: >-
    any_of_exprs(
      'install.packages(pkgs = "tidyverse")',
      'if (!require("tidyverse")) install.packages(pkgs = "tidyverse")',
      'skip()'
    )
  Hint: 'If the package is already installed, type skip().'
    
- Class: cmd_question
  Output: 'Now load the tidyverse package.'
  CorrectAnswer: library("tidyverse")
  AnswerTests: any_of_exprs('library(tidyverse)', 'library("tidyverse")')
  Hint: 'Avoid using {require}. Use {library}.'

# PREAMBLE ABOUT PIPES =========================================================
## demo_lesson(4)
- Class: text
  Output: >-
    A pipe operator {%>%} is a key concept in tidyverse, and it will be best to
    explain its basics before we move onto lessons such as data manipulation
    with {dplyr} package. See Chapter 18 of R4DS at 
    https://r4ds.had.co.nz/pipes.html. 

## demo_lesson(5)
- Class: text
  Output: >-
    Think about it as an industrial process in a chocolate factory. You are
    given unroasted cocoa beans. You then (1) roast them, (2) crack them, (3)
    crush the nibs, (4) mix the liquid with sugar (maybe milk too), (5) stir
    the mixture, (6) temper it, (7) pour it into a mold, and finally (8) package
    it! Your raw data is your cocoa beans. The packaged chocolate bar is
    your final product, whether it be a regression result, table, figure, or
    a tidied-up data itself. 

## demo_lesson(6)
- Class: text
  Output: >-
    The point is, your raw data will go through a series of processing.
    The pipe operator makes this process extremely intuitive with the sequence
    of your work clearly visible.

# QUICK DEMO ===================================================================
## demo_lesson(7)
- Class: cmd_question
  Output: >- 
    Let's demonstrate this by a sample dataset. Load a dataset called "midwest".
    This is part of the {ggplot2} package.
  CorrectAnswer: data(midwest)
  AnswerTests: omnitest(correctExpr = 'data(midwest)')
  Hint: 'Do not use quotes within function {data}.'

## demo_lesson(8)
- Class: cmd_question
  Output: >- 
    Let's first peruse the dataset as if it is a spreadsheet. Pull it up
    into the Data Viewer.
  CorrectAnswer: View(midwest)
  AnswerTests: omnitest(correctExpr = 'View(midwest)')
  Hint: 'Use function {View}.'

## demo_lesson(9)
- Class: cmd_question
  Output: >-
    Yikes, lots of rows! Suppose you want to see just Indiana data. How to
    achieve this first process/piping? I have already written down the code for
    you. Print it using {cat}: type and execute {cat(pipe_1)}.
  CorrectAnswer: 'cat(pipe_1)'
  AnswerTests: omnitest(correctExpr = 'cat(pipe_1)')
  Hint: 'Just copy-paste it!'

## demo_lesson(10)
- Class: cmd_question
  Output: 'Copy-paste the above printed code and execute it.'
  CorrectAnswer: >-
    midwest %>% 
      filter(state == "IN")
  AnswerTests: omnitest(correctExpr = 'midwest %>% filter(state == "IN")')
  Hint: 'Just copy-paste it!'

## demo_lesson(11)
- Class: text
  Output: >-
    Good job! What do you see? Whereas the Data Viewer one shows you rows
    starting with Illinois counties, now you only see those in Indiana.
    
## demo_lesson(12)
- Class: text
  Output: >-
    What happened is that the "midwest" object was received through the pipe
    and subject to the function {filter}. In the forward-pipe operator,
    the *left* side ("midwest") is processed by the *right* side ("filter")
    (in this case, the next line's function).

## demo_lesson(13)
- Class: text
  Output: >-
    Let's try another exercise. If you are confused, stop the lesson using
    {play()} to tinker with pipes yourself.

## demo_lesson(14)
- Class: cmd_question
  Output: >-
    You are interested in verifying that the race percentages were calculated
    correctly, so you are not interested in variables like `PID`, `area`, and
    `popdensity`. But they are one of the first variables you see, which can be
    annoying. Let's de-clutter. Type and execute {cat(pipe_2)}.
  CorrectAnswer: 'cat(pipe_2)'
  AnswerTests: omnitest(correctExpr = 'cat(pipe_2)')
  Hint: 'Just copy-paste it!'

## demo_lesson(15)
- Class: cmd_question
  Output: 'Copy-paste the above printed code and execute it.'
  CorrectAnswer: >-
    midwest %>%
      filter(state == "IN") %>% 
      select(-PID, -area, -popdensity)
  AnswerTests: >-
    omnitest(
      correctExpr = '
      midwest %>%
      filter(state == "IN") %>% 
      select(-PID, -area, -popdensity)
      '
    )
  Hint: 'Just copy-paste it!'

## demo_lesson(16)
- Class: text
  Output: >-
    You got rid of the three variables! Note that the data is still subset to
    Indiana counties. The tibble was subject to {filter}, *then* {select}.

## demo_lesson(17)
- Class: cmd_question
  Output: >-
    You now want to see the tibble sorted by `poptotal`, which is presumably
    the total population in the county. Type and execute {cat(pipe_3)}.
  CorrectAnswer: 'cat(pipe_3)'
  AnswerTests: omnitest(correctExpr = 'cat(pipe_3)')
  Hint: 'Just copy-paste it!'

## demo_lesson(18)
- Class: cmd_question
  Output: 'Copy-paste the above printed code and execute it.'
  CorrectAnswer: >-
    midwest %>%
      filter(state == "IN") %>% 
      select(-PID, -area, -popdensity) %>%
      arrange(desc(poptotal))
  AnswerTests: >-
    omnitest(
      correctExpr = '
      midwest %>%
      filter(state == "IN") %>% 
      select(-PID, -area, -popdensity) %>%
      arrange(desc(poptotal))
      '
    )
  Hint: 'Just copy-paste it!'

## demo_lesson(19)
- Class: text
  Output: "Your remaining data has been arranged by population in a descending \
    order! \n\n
    
    (1) The data is still contains only Indiana counties, and \
    (2) still does not variables called `PID`, `area`, and `popdensity`. \
    Now, it has then (3) been arranged by `poptotal`. \n\n
    
    The tibble was subject to {filter}, *then* {select}, *then* {arrange}.
    Accordingly, there were three pipe operators in our code."
    
## demo_lesson(20)
- Class: text
  Output: >-
    Note that the piped output is not stored anywhere yet. We have merely 
    printed it on the console. If you want to store the output, you should 
    do an explicit assignment.

# OUTRO ========================================================================
- Class: text
  Output: >-
    So that was the very basic introduction to pipes! This is essential as we
    move on to the key lessons. See how it is similar to a chocolate factory?
    
- Class: text
  Output: >-
    Pipe operator helps keep track of your actions in a more readable form.
    In addition, you do not have to store all the intermediate outputs. It is 
    of course good practice to keep checking that each step is doing what you 
    think it should be doing!
    
- Class: text
  Output: >-
    Again, see Chapter 18 of R4DS for why {%>%} is good (and when not to use
    them). Also check out the documentation by typing {?magrittr::`%>%`}. 

- Class: text
  Output: >-
    You have completed "03_intro_pipes" lesson of swirl-tidy!
    I will see you in the next lesson.
    
